use crate::session::Session;
use seed::prelude::Node;

////////////////////////////////////////////////////////////////
// TYPES //
////////////////////////////////////////////////////////////////

pub struct Model {
    session: Session,
    game_id: String,
}

#[derive(Clone)]
pub enum Msg {
    Msg,
}

impl Model {
    pub fn get_session(&self) -> Session {
        self.session
    }

    pub fn get_game_id(&self) -> String {
        self.game_id.clone()
    }
}
////////////////////////////////////////////////////////////////
// INIT //
////////////////////////////////////////////////////////////////

pub fn init(session: Session, game_id: String) -> Model {
    Model { session, game_id }
}

////////////////////////////////////////////////////////////////
// UPDATE //
////////////////////////////////////////////////////////////////

pub fn update(msg: Msg, _model: &mut Model) {
    match msg {
        Msg::Msg => {}
    }
}

////////////////////////////////////////////////////////////////
// VIEW //
////////////////////////////////////////////////////////////////

pub fn view(_model: &Model) -> Vec<Node<Msg>> {
    vec![]
}
